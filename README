A)CRUD operation Contact app

1. List all the contacts (with Pagination)
Method : GET
Request : https://contactlistrahul.herokuapp.com/phonebook/
Response :
{
    "count": 1028,
    "next": "https://contactlistrahul.herokuapp.com/phonebook/?limit=10&offset=10",
    "previous": null,
    "results": [
        {
            "id": 1,
            "contact_name": "c",
            "email": "c@gmail.com"
        },
        {
            "id": 2,
            "contact_name": "0_A",
            "email": "Az@gmail.com"
        },
        .
        .
        .
        .
 }

 2. Create a new contact
 Method : POST
 Request : https://contactlistrahul.herokuapp.com/phonebook/
 request body:
 {
    "contact_name": "Bob",
    "email": "testbob@gmail.com"
 }
 Response :
 {
    "id": 30,
    "contact_name": "Bob",
    "email": "testbob@gmail.com"
 }

 3.Update a contact with id (example id = 30)
 Method : PUT
 Request : https://contactlistrahul.herokuapp.com/phonebook/30
 request body:
 {
    "contact_name": "Bob",
    "email": "editedBob@gmail.com"
 }
 Response:
 {
    "id": 30,
    "contact_name": "Bob",
    "email": "editedBob@gmail.com"
 }

 4. Delete a contact with id (example id =29)
 Method : DEL
 Request : https://contactlistrahul.herokuapp.com/phonebook/29


B) Each contact should have a unique email address : "email" field is added with unique constraint

C) APIs should support adding/editing/deleting contacts (Already covered in (A))

D) Allow searching by name and email address

 1. Search with contact name:
 Method : GET
 Request : https://contactlistrahul.herokuapp.com/phonebook/?search_contact_name=Bob
 Response :
 {
    "count": 4,
    "next": null,
    "previous": null,
    "results": [
        {
            "id": 30,
            "contact_name": "Bob",
            "email": "editedBob@gmail.com"
        },
        {
            "id": 31,
            "contact_name": "BobJindal",
            "email": "testjindAL@gmail.com"
        },
        {
            "id": 32,
            "contact_name": "James bob",
            "email": "bobjames@gmail.com"
        },
        {
            "id": 33,
            "contact_name": "James Bob",
            "email": "Jamesob@gmail.com"
        }
    ]
}

 2. Search using email id
 Method : GET
 Request : https://contactlistrahul.herokuapp.com/phonebook/?search_email=hotmail
 (Search email field that contains "hotmail"
 Response :
 {
    "count": 5,
    "next": null,
    "previous": null,
    "results": [
        {
            "id": 9,
            "contact_name": "6_G",
            "email": "Gt@hotmail.com"
        },
        {
            "id": 13,
            "contact_name": "10_K",
            "email": "Kp@hotmail.com"
        },
        {
            "id": 17,
            "contact_name": "14_O",
            "email": "Ol@hotmail.com"
        },
        .
        .
        .
        .
 }


    With just two fields and one relation , NoSQL is always a better option than relational DB(PostGreSQL in this case)
    Tried adding indices for "contact_name" field on Heroku but could not succeed. As "email" is unique field so by default PostGreSQL
    should add index for it.

    A memcached or redis layer can also be added for faster access (because of heavy read)

E) Search should support pagination and should return 10 items by default per invocation

    Added pagination with list of contacts and search results.

F) Add unit tests and Integration tests for each functionality.

    Tried adding basic unit test cases. Could not add integration tests.

G) Add basic authentication for the app. Use environment variables or basic auth(for rest APIs)

    Had added token based authentication in the local setup, failed the replicate same in Heroku environment.


H) The code should scale out for millions of contacts per contact book.

   Again NoSQL wins over relational DB here but PostGreSQL should be able to handle few million records easily.
   Heroku has a limit of 10K records for free account.          

